
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGAND CHAR COLON COMMA COMMENT COMPAR CTE_C CTE_F CTE_I CTE_S DESDE DET DIV DOT ENTONCES EQ ESCRIBE FLOAT FUNCION GREATER GREATER_EQ HACER HASTA HAZ ID INT INV LBRACKET LEE LESS LESS_EQ LPAREN LSQ MIENTRAS MINUS MULT NOT_EQ NULL OR PLUS PRINCIPAL PROGRAMA RBRACKET RPAREN RSQ SEMI_COLON SI SINO TRAN VAR VOIDEMPTY :MAIN : PRINCIPAL LPAREN RPAREN BLOQUEPROG : PROGRAMA ID SEMI_COLON VARS FUNCTION MAINVARS : VAR TIPO\n            | EMPTYTIPO : INT VAR_INT SEMI_COLON TIPO\n            | FLOAT VAR_TIPO SEMI_COLON TIPO\n            | CHAR VAR_TIPO SEMI_COLON TIPO\n            | EMPTYVAR_INT : LIST_ID COMMA VAR_INT\n                | ID COMMA VAR_INT\n                | LIST_ID\n                | IDVAR_TIPO : ID COMMA\n                | IDLIST_ID : ID LSQ TIR_EXPRESION RSQ\n                | ID LSQ TIR_EXPRESION RSQ LSQ TIR_EXPRESION RSQ\n    EXPRESION : SEC_EXPRESION\n                | SEC_EXPRESION COMPAR EXPRESION\n                | SEC_EXPRESION AND EXPRESION\n                | SEC_EXPRESION OR EXPRESIONSEC_EXPRESION : TIR_EXPRESION\n                    | TIR_EXPRESION NOT_EQ SEC_EXPRESION\n                    | TIR_EXPRESION GREATER_EQ SEC_EXPRESION\n                    | TIR_EXPRESION LESS_EQ SEC_EXPRESION\n                    | TIR_EXPRESION GREATER SEC_EXPRESION\n                    | TIR_EXPRESION LESS SEC_EXPRESIONTIR_EXPRESION : FOR_EXPRESION\n                    | FOR_EXPRESION PLUS TIR_EXPRESION\n                    | FOR_EXPRESION MINUS TIR_EXPRESIONFOR_EXPRESION : FIF_EXPRESION\n                    | FIF_EXPRESION MULT FOR_EXPRESION\n                    | FIF_EXPRESION DIV FOR_EXPRESIONFIF_EXPRESION : ID\n                    | ID DET\n                    | LIST_ID\n                    | CONSTANTE\n                    | LLAMADA\n                    | LPAREN EXPRESION RPAREN\n    CONSTANTE : CTE_I\n                | CTE_F\n                | CTE_C\n                | CTE_S\n    BLOQUE : LBRACKET OPCION_BLOQUE RBRACKETOPCION_BLOQUE : LECTURA SEMI_COLON OPCION_BLOQUE\n                    | ESCRITURA SEMI_COLON OPCION_BLOQUE\n                    | LLAMADA SEMI_COLON OPCION_BLOQUE\n                    | ESTATUTO OPCION_BLOQUE\n                    | MIENTRAS_CICLO OPCION_BLOQUE\n                    | DESDE_CICLO OPCION_BLOQUE\n                    | ASIGNACION SEMI_COLON OPCION_BLOQUE\n                    | EMPTY\n    FUNCTION : FUNCION TIPO_FUNC ID LPAREN PARAMETROS RPAREN VARS BLOQUE FUNCTION\n                | EMPTYTIPO_FUNC : INT\n                | FLOAT\n                | CHAR\n                | VOIDPARAMETROS : INT ID\n                | FLOAT ID\n                | CHAR ID\n                | COMMA PARAMETROSDESDE_CICLO : DESDE ID EQ CTE_I HASTA CTE_I HACER BLOQUEMIENTRAS_CICLO : MIENTRAS LPAREN EXPRESION RPAREN HAZ BLOQUELECTURA : LEE LPAREN ID RPARENESCRITURA : ESCRIBE LPAREN TIPO_PARAMETROS RPARENLLAMADA : ID LPAREN TIPO_PARAMETROS RPARENTIPO_PARAMETROS : EXPRESION\n                        | EXPRESION COMMA TIPO_PARAMETROSESTATUTO : SI LPAREN EXPRESION RPAREN ENTONCES BLOQUE ESTATUTO_SINOESTATUTO_SINO : SINO BLOQUE\n                    | EMPTYASIGNACION : ID EQ EXPRESION\n                    | LIST_ID EQ EXPRESION'
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,16,57,111,],[0,-3,-2,-44,]),'ID':([2,12,13,14,18,19,20,21,22,32,33,34,50,58,60,61,62,65,67,68,69,70,78,79,80,88,97,103,104,105,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,125,128,161,162,164,166,168,169,],[3,25,27,27,30,-55,-56,-57,-58,25,25,43,43,84,91,92,93,43,43,43,43,43,84,84,84,124,43,43,43,43,43,43,43,43,43,-44,84,84,84,84,142,43,43,43,43,43,43,-1,-64,-70,-72,-71,-63,]),'SEMI_COLON':([3,23,24,25,26,27,28,36,41,42,43,45,46,47,48,49,51,52,53,54,64,66,72,73,75,76,77,81,98,99,100,101,102,127,130,131,132,133,134,135,136,137,143,148,151,152,153,],[4,31,-12,-13,35,-15,37,-14,-10,-11,-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,-18,-22,112,113,114,118,-29,-30,-32,-33,-39,-67,-19,-20,-21,-23,-24,-25,-26,-27,-73,-74,-17,-65,-66,]),'VAR':([4,90,],[6,6,]),'FUNCION':([4,5,6,7,11,15,31,35,37,40,55,56,111,149,],[-1,9,-1,-5,-4,-9,-1,-1,-1,-6,-7,-8,-44,9,]),'PRINCIPAL':([4,5,6,7,8,10,11,15,31,35,37,40,55,56,111,149,157,],[-1,-1,-1,-5,17,-54,-4,-9,-1,-1,-1,-6,-7,-8,-44,-1,-53,]),'INT':([6,9,31,35,37,39,63,],[12,19,12,12,12,60,60,]),'FLOAT':([6,9,31,35,37,39,63,],[13,20,13,13,13,61,61,]),'CHAR':([6,9,31,35,37,39,63,],[14,21,14,14,14,62,62,]),'LBRACKET':([6,7,11,15,31,35,37,38,40,55,56,90,126,158,159,165,167,],[-1,-5,-4,-9,-1,-1,-1,58,-6,-7,-8,-1,58,58,58,58,58,]),'VOID':([9,],[22,]),'LPAREN':([17,30,34,43,50,65,67,68,69,70,83,84,85,86,87,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[29,39,50,65,50,50,50,50,50,50,119,65,121,122,123,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'COMMA':([24,25,27,39,43,45,46,47,48,49,51,52,53,54,63,64,66,72,73,96,98,99,100,101,102,127,130,131,132,133,134,135,136,137,151,],[32,33,36,63,-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,63,-35,-16,-18,-22,128,-29,-30,-32,-33,-39,-67,-19,-20,-21,-23,-24,-25,-26,-27,-17,]),'LSQ':([25,43,66,84,],[34,34,97,34,]),'RPAREN':([29,43,45,46,47,48,49,51,52,53,54,59,64,66,71,72,73,91,92,93,94,95,96,98,99,100,101,102,127,130,131,132,133,134,135,136,137,142,144,145,146,150,151,],[38,-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,90,-35,-16,102,-18,-22,-59,-60,-61,-62,127,-68,-29,-30,-32,-33,-39,-67,-19,-20,-21,-23,-24,-25,-26,-27,152,153,154,155,-69,-17,]),'CTE_I':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,147,160,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,156,163,]),'CTE_F':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'CTE_C':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'CTE_S':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'MULT':([43,46,47,48,49,51,52,53,54,64,66,102,127,151,],[-34,69,-36,-37,-38,-40,-41,-42,-43,-35,-16,-39,-67,-17,]),'DIV':([43,46,47,48,49,51,52,53,54,64,66,102,127,151,],[-34,70,-36,-37,-38,-40,-41,-42,-43,-35,-16,-39,-67,-17,]),'PLUS':([43,45,46,47,48,49,51,52,53,54,64,66,100,101,102,127,151,],[-34,67,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,-32,-33,-39,-67,-17,]),'MINUS':([43,45,46,47,48,49,51,52,53,54,64,66,100,101,102,127,151,],[-34,68,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,-32,-33,-39,-67,-17,]),'RSQ':([43,44,45,46,47,48,49,51,52,53,54,64,66,98,99,100,101,102,127,129,151,],[-34,66,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,-29,-30,-32,-33,-39,-67,151,-17,]),'NOT_EQ':([43,45,46,47,48,49,51,52,53,54,64,66,73,98,99,100,101,102,127,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,106,-29,-30,-32,-33,-39,-67,-17,]),'GREATER_EQ':([43,45,46,47,48,49,51,52,53,54,64,66,73,98,99,100,101,102,127,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,107,-29,-30,-32,-33,-39,-67,-17,]),'LESS_EQ':([43,45,46,47,48,49,51,52,53,54,64,66,73,98,99,100,101,102,127,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,108,-29,-30,-32,-33,-39,-67,-17,]),'GREATER':([43,45,46,47,48,49,51,52,53,54,64,66,73,98,99,100,101,102,127,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,109,-29,-30,-32,-33,-39,-67,-17,]),'LESS':([43,45,46,47,48,49,51,52,53,54,64,66,73,98,99,100,101,102,127,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,110,-29,-30,-32,-33,-39,-67,-17,]),'COMPAR':([43,45,46,47,48,49,51,52,53,54,64,66,72,73,98,99,100,101,102,127,133,134,135,136,137,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,103,-22,-29,-30,-32,-33,-39,-67,-23,-24,-25,-26,-27,-17,]),'AND':([43,45,46,47,48,49,51,52,53,54,64,66,72,73,98,99,100,101,102,127,133,134,135,136,137,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,104,-22,-29,-30,-32,-33,-39,-67,-23,-24,-25,-26,-27,-17,]),'OR':([43,45,46,47,48,49,51,52,53,54,64,66,72,73,98,99,100,101,102,127,133,134,135,136,137,151,],[-34,-28,-31,-36,-37,-38,-40,-41,-42,-43,-35,-16,105,-22,-29,-30,-32,-33,-39,-67,-23,-24,-25,-26,-27,-17,]),'DET':([43,],[64,]),'LEE':([58,78,79,80,111,112,113,114,118,161,162,164,166,168,169,],[83,83,83,83,-44,83,83,83,83,-1,-64,-70,-72,-71,-63,]),'ESCRIBE':([58,78,79,80,111,112,113,114,118,161,162,164,166,168,169,],[85,85,85,85,-44,85,85,85,85,-1,-64,-70,-72,-71,-63,]),'SI':([58,78,79,80,111,112,113,114,118,161,162,164,166,168,169,],[86,86,86,86,-44,86,86,86,86,-1,-64,-70,-72,-71,-63,]),'MIENTRAS':([58,78,79,80,111,112,113,114,118,161,162,164,166,168,169,],[87,87,87,87,-44,87,87,87,87,-1,-64,-70,-72,-71,-63,]),'DESDE':([58,78,79,80,111,112,113,114,118,161,162,164,166,168,169,],[88,88,88,88,-44,88,88,88,88,-1,-64,-70,-72,-71,-63,]),'RBRACKET':([58,74,78,79,80,82,111,112,113,114,115,116,117,118,138,139,140,141,161,162,164,166,168,169,],[-1,111,-1,-1,-1,-52,-44,-1,-1,-1,-48,-49,-50,-1,-45,-46,-47,-51,-1,-64,-70,-72,-71,-63,]),'EQ':([66,84,89,124,151,],[-16,120,125,147,-17,]),'SINO':([111,161,],[-44,165,]),'ENTONCES':([154,],[158,]),'HAZ':([155,],[159,]),'HASTA':([156,],[160,]),'HACER':([163,],[167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROG':([0,],[1,]),'VARS':([4,90,],[5,126,]),'EMPTY':([4,5,6,31,35,37,58,78,79,80,90,112,113,114,118,149,161,],[7,10,15,15,15,15,82,82,82,82,7,82,82,82,82,10,166,]),'FUNCTION':([5,149,],[8,157,]),'TIPO':([6,31,35,37,],[11,40,55,56,]),'MAIN':([8,],[16,]),'TIPO_FUNC':([9,],[18,]),'VAR_INT':([12,32,33,],[23,41,42,]),'LIST_ID':([12,32,33,34,50,58,65,67,68,69,70,78,79,80,97,103,104,105,106,107,108,109,110,112,113,114,118,120,121,122,123,125,128,],[24,24,24,47,47,89,47,47,47,47,47,89,89,89,47,47,47,47,47,47,47,47,47,89,89,89,89,47,47,47,47,47,47,]),'VAR_TIPO':([13,14,],[26,28,]),'TIR_EXPRESION':([34,50,65,67,68,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[44,73,73,98,99,129,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'FOR_EXPRESION':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[45,45,45,45,45,100,101,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FIF_EXPRESION':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CONSTANTE':([34,50,65,67,68,69,70,97,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'LLAMADA':([34,50,58,65,67,68,69,70,78,79,80,97,103,104,105,106,107,108,109,110,112,113,114,118,120,121,122,123,125,128,],[49,49,77,49,49,49,49,49,77,77,77,49,49,49,49,49,49,49,49,49,77,77,77,77,49,49,49,49,49,49,]),'BLOQUE':([38,126,158,159,165,167,],[57,149,161,162,168,169,]),'PARAMETROS':([39,63,],[59,94,]),'EXPRESION':([50,65,103,104,105,120,121,122,123,125,128,],[71,96,130,131,132,143,96,145,146,148,96,]),'SEC_EXPRESION':([50,65,103,104,105,106,107,108,109,110,120,121,122,123,125,128,],[72,72,72,72,72,133,134,135,136,137,72,72,72,72,72,72,]),'OPCION_BLOQUE':([58,78,79,80,112,113,114,118,],[74,115,116,117,138,139,140,141,]),'LECTURA':([58,78,79,80,112,113,114,118,],[75,75,75,75,75,75,75,75,]),'ESCRITURA':([58,78,79,80,112,113,114,118,],[76,76,76,76,76,76,76,76,]),'ESTATUTO':([58,78,79,80,112,113,114,118,],[78,78,78,78,78,78,78,78,]),'MIENTRAS_CICLO':([58,78,79,80,112,113,114,118,],[79,79,79,79,79,79,79,79,]),'DESDE_CICLO':([58,78,79,80,112,113,114,118,],[80,80,80,80,80,80,80,80,]),'ASIGNACION':([58,78,79,80,112,113,114,118,],[81,81,81,81,81,81,81,81,]),'TIPO_PARAMETROS':([65,121,128,],[95,144,150,]),'ESTATUTO_SINO':([161,],[164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROG","S'",1,None,None,None),
  ('EMPTY -> <empty>','EMPTY',0,'p_EMPTY','parser.py',26),
  ('MAIN -> PRINCIPAL LPAREN RPAREN BLOQUE','MAIN',4,'p_MAIN','parser.py',30),
  ('PROG -> PROGRAMA ID SEMI_COLON VARS FUNCTION MAIN','PROG',6,'p_PROG','parser.py',34),
  ('VARS -> VAR TIPO','VARS',2,'p_VARS','parser.py',38),
  ('VARS -> EMPTY','VARS',1,'p_VARS','parser.py',39),
  ('TIPO -> INT VAR_INT SEMI_COLON TIPO','TIPO',4,'p_TIPO','parser.py',43),
  ('TIPO -> FLOAT VAR_TIPO SEMI_COLON TIPO','TIPO',4,'p_TIPO','parser.py',44),
  ('TIPO -> CHAR VAR_TIPO SEMI_COLON TIPO','TIPO',4,'p_TIPO','parser.py',45),
  ('TIPO -> EMPTY','TIPO',1,'p_TIPO','parser.py',46),
  ('VAR_INT -> LIST_ID COMMA VAR_INT','VAR_INT',3,'p_VAR_INT','parser.py',50),
  ('VAR_INT -> ID COMMA VAR_INT','VAR_INT',3,'p_VAR_INT','parser.py',51),
  ('VAR_INT -> LIST_ID','VAR_INT',1,'p_VAR_INT','parser.py',52),
  ('VAR_INT -> ID','VAR_INT',1,'p_VAR_INT','parser.py',53),
  ('VAR_TIPO -> ID COMMA','VAR_TIPO',2,'p_VAR_TIPO','parser.py',57),
  ('VAR_TIPO -> ID','VAR_TIPO',1,'p_VAR_TIPO','parser.py',58),
  ('LIST_ID -> ID LSQ TIR_EXPRESION RSQ','LIST_ID',4,'p_LIST_ID','parser.py',62),
  ('LIST_ID -> ID LSQ TIR_EXPRESION RSQ LSQ TIR_EXPRESION RSQ','LIST_ID',7,'p_LIST_ID','parser.py',63),
  ('EXPRESION -> SEC_EXPRESION','EXPRESION',1,'p_EXPRESION','parser.py',71),
  ('EXPRESION -> SEC_EXPRESION COMPAR EXPRESION','EXPRESION',3,'p_EXPRESION','parser.py',72),
  ('EXPRESION -> SEC_EXPRESION AND EXPRESION','EXPRESION',3,'p_EXPRESION','parser.py',73),
  ('EXPRESION -> SEC_EXPRESION OR EXPRESION','EXPRESION',3,'p_EXPRESION','parser.py',74),
  ('SEC_EXPRESION -> TIR_EXPRESION','SEC_EXPRESION',1,'p_SEC_EXPRESION','parser.py',78),
  ('SEC_EXPRESION -> TIR_EXPRESION NOT_EQ SEC_EXPRESION','SEC_EXPRESION',3,'p_SEC_EXPRESION','parser.py',79),
  ('SEC_EXPRESION -> TIR_EXPRESION GREATER_EQ SEC_EXPRESION','SEC_EXPRESION',3,'p_SEC_EXPRESION','parser.py',80),
  ('SEC_EXPRESION -> TIR_EXPRESION LESS_EQ SEC_EXPRESION','SEC_EXPRESION',3,'p_SEC_EXPRESION','parser.py',81),
  ('SEC_EXPRESION -> TIR_EXPRESION GREATER SEC_EXPRESION','SEC_EXPRESION',3,'p_SEC_EXPRESION','parser.py',82),
  ('SEC_EXPRESION -> TIR_EXPRESION LESS SEC_EXPRESION','SEC_EXPRESION',3,'p_SEC_EXPRESION','parser.py',83),
  ('TIR_EXPRESION -> FOR_EXPRESION','TIR_EXPRESION',1,'p_TIR_EXPRESION','parser.py',87),
  ('TIR_EXPRESION -> FOR_EXPRESION PLUS TIR_EXPRESION','TIR_EXPRESION',3,'p_TIR_EXPRESION','parser.py',88),
  ('TIR_EXPRESION -> FOR_EXPRESION MINUS TIR_EXPRESION','TIR_EXPRESION',3,'p_TIR_EXPRESION','parser.py',89),
  ('FOR_EXPRESION -> FIF_EXPRESION','FOR_EXPRESION',1,'p_FOR_EXPRESION','parser.py',93),
  ('FOR_EXPRESION -> FIF_EXPRESION MULT FOR_EXPRESION','FOR_EXPRESION',3,'p_FOR_EXPRESION','parser.py',94),
  ('FOR_EXPRESION -> FIF_EXPRESION DIV FOR_EXPRESION','FOR_EXPRESION',3,'p_FOR_EXPRESION','parser.py',95),
  ('FIF_EXPRESION -> ID','FIF_EXPRESION',1,'p_FIF_EXPRESION','parser.py',99),
  ('FIF_EXPRESION -> ID DET','FIF_EXPRESION',2,'p_FIF_EXPRESION','parser.py',100),
  ('FIF_EXPRESION -> LIST_ID','FIF_EXPRESION',1,'p_FIF_EXPRESION','parser.py',101),
  ('FIF_EXPRESION -> CONSTANTE','FIF_EXPRESION',1,'p_FIF_EXPRESION','parser.py',102),
  ('FIF_EXPRESION -> LLAMADA','FIF_EXPRESION',1,'p_FIF_EXPRESION','parser.py',103),
  ('FIF_EXPRESION -> LPAREN EXPRESION RPAREN','FIF_EXPRESION',3,'p_FIF_EXPRESION','parser.py',104),
  ('CONSTANTE -> CTE_I','CONSTANTE',1,'p_CONSTANTE','parser.py',109),
  ('CONSTANTE -> CTE_F','CONSTANTE',1,'p_CONSTANTE','parser.py',110),
  ('CONSTANTE -> CTE_C','CONSTANTE',1,'p_CONSTANTE','parser.py',111),
  ('CONSTANTE -> CTE_S','CONSTANTE',1,'p_CONSTANTE','parser.py',112),
  ('BLOQUE -> LBRACKET OPCION_BLOQUE RBRACKET','BLOQUE',3,'p_BLOQUE','parser.py',120),
  ('OPCION_BLOQUE -> LECTURA SEMI_COLON OPCION_BLOQUE','OPCION_BLOQUE',3,'p_OPCION_BLOQUE','parser.py',124),
  ('OPCION_BLOQUE -> ESCRITURA SEMI_COLON OPCION_BLOQUE','OPCION_BLOQUE',3,'p_OPCION_BLOQUE','parser.py',125),
  ('OPCION_BLOQUE -> LLAMADA SEMI_COLON OPCION_BLOQUE','OPCION_BLOQUE',3,'p_OPCION_BLOQUE','parser.py',126),
  ('OPCION_BLOQUE -> ESTATUTO OPCION_BLOQUE','OPCION_BLOQUE',2,'p_OPCION_BLOQUE','parser.py',127),
  ('OPCION_BLOQUE -> MIENTRAS_CICLO OPCION_BLOQUE','OPCION_BLOQUE',2,'p_OPCION_BLOQUE','parser.py',128),
  ('OPCION_BLOQUE -> DESDE_CICLO OPCION_BLOQUE','OPCION_BLOQUE',2,'p_OPCION_BLOQUE','parser.py',129),
  ('OPCION_BLOQUE -> ASIGNACION SEMI_COLON OPCION_BLOQUE','OPCION_BLOQUE',3,'p_OPCION_BLOQUE','parser.py',130),
  ('OPCION_BLOQUE -> EMPTY','OPCION_BLOQUE',1,'p_OPCION_BLOQUE','parser.py',131),
  ('FUNCTION -> FUNCION TIPO_FUNC ID LPAREN PARAMETROS RPAREN VARS BLOQUE FUNCTION','FUNCTION',9,'p_FUNCTION','parser.py',141),
  ('FUNCTION -> EMPTY','FUNCTION',1,'p_FUNCTION','parser.py',142),
  ('TIPO_FUNC -> INT','TIPO_FUNC',1,'p_TIPO_FUNC','parser.py',146),
  ('TIPO_FUNC -> FLOAT','TIPO_FUNC',1,'p_TIPO_FUNC','parser.py',147),
  ('TIPO_FUNC -> CHAR','TIPO_FUNC',1,'p_TIPO_FUNC','parser.py',148),
  ('TIPO_FUNC -> VOID','TIPO_FUNC',1,'p_TIPO_FUNC','parser.py',149),
  ('PARAMETROS -> INT ID','PARAMETROS',2,'p_PARAMETROS','parser.py',153),
  ('PARAMETROS -> FLOAT ID','PARAMETROS',2,'p_PARAMETROS','parser.py',154),
  ('PARAMETROS -> CHAR ID','PARAMETROS',2,'p_PARAMETROS','parser.py',155),
  ('PARAMETROS -> COMMA PARAMETROS','PARAMETROS',2,'p_PARAMETROS','parser.py',156),
  ('DESDE_CICLO -> DESDE ID EQ CTE_I HASTA CTE_I HACER BLOQUE','DESDE_CICLO',8,'p_DESDE_CICLO','parser.py',161),
  ('MIENTRAS_CICLO -> MIENTRAS LPAREN EXPRESION RPAREN HAZ BLOQUE','MIENTRAS_CICLO',6,'p_MIENTRAS_CICLO','parser.py',166),
  ('LECTURA -> LEE LPAREN ID RPAREN','LECTURA',4,'p_LECTURA','parser.py',171),
  ('ESCRITURA -> ESCRIBE LPAREN TIPO_PARAMETROS RPAREN','ESCRITURA',4,'p_ESCRITURA','parser.py',176),
  ('LLAMADA -> ID LPAREN TIPO_PARAMETROS RPAREN','LLAMADA',4,'p_LLAMADA','parser.py',181),
  ('TIPO_PARAMETROS -> EXPRESION','TIPO_PARAMETROS',1,'p_TIPO_PARAMETROS','parser.py',185),
  ('TIPO_PARAMETROS -> EXPRESION COMMA TIPO_PARAMETROS','TIPO_PARAMETROS',3,'p_TIPO_PARAMETROS','parser.py',186),
  ('ESTATUTO -> SI LPAREN EXPRESION RPAREN ENTONCES BLOQUE ESTATUTO_SINO','ESTATUTO',7,'p_ESTATUTO','parser.py',191),
  ('ESTATUTO_SINO -> SINO BLOQUE','ESTATUTO_SINO',2,'p_ESTATUTO_SINO','parser.py',195),
  ('ESTATUTO_SINO -> EMPTY','ESTATUTO_SINO',1,'p_ESTATUTO_SINO','parser.py',196),
  ('ASIGNACION -> ID EQ EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',201),
  ('ASIGNACION -> LIST_ID EQ EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',202),
]
